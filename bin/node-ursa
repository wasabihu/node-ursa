#!/usr/bin/env node

/**
 * Module dependencies.
 */

var exec = require('child_process').exec,
  program = require('commander'),
  mkdirp = require('mkdirp'),
  pkg = require('../package.json'),
  version = pkg.version,
  os = require('os'),
  fs = require('fs'),
  build=require('../lib/build'),
  ursa = require('../lib/ursa');
require('../lib/utils');

// CLI

program
  .version(version)
  .usage('[options] ')
  .option('-i,--init', 'Initialize the environment')
  .option('-b,--build [item]', 'Build target')
  .option('-c,--compress', 'Compress js&css')
  .option('-h,--html', 'Generate html')
  .option('-s,--start [port]', 'Start ursa server')
  .option('--help', 'Show help')
  .parse(process.argv);

// Path

var path = program.args.shift() || '.';

if (program.init) {
  //Shoule initialize
  createApplication(path);
} else if (program.start) {
  var app = ursa.getInstance();
  var port = +program.start;
  app.listen((port > 0 && port < 65535) ? port : 8899);
} else if (program.build) {
  //Should build an item
  //@todo
  if('boolean'===typeof program.build)
    program.build=null;
  return build(program.build,!!program.compress,!!program.html);
} else if (program.help) {
  //Show help
} else {
  console.error("Unknown parameters!".error);
}

// Generate application

function createApplication(path) {
  emptyDirectory(path, function(empty) {
    if (empty) {
      createApplicationAt(path);
    } else {
      program.confirm('Directory is not empty, continue? ', function(ok) {
        if (ok) {
          process.stdin.destroy();
          createApplicationAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplicationAt(path) {
  console.log();
  process.on('exit', function() {
    console.log();
    console.log('   install dependencies:');
    console.log('     $ cd %s && npm install', path);
    console.log();
    console.log('   run the app:');
    console.log('     $ node app');
    console.log();
  });

  mkdir(path, function() {
    mkdir(path + '/statc', function() {
      mkdir(path + '/statc/img');
      mkdir(path + '/statc/css');
      mkdir(path + '/statc/js');
    });
    mkdir(path + "/template");
    mkdir(path + "/_data");
  });

  // manifest.json
  var manifest = {
    static_prefix: '.',
    img_prefix: ".",
    timeStampName:"_",
    require_js_modules: ['main'],
    require_css_modules: ['main'],
    require_html_modules: ['index'],
    local: {
      static_prefix: ".",
      img_prefix: ".",
    },
    online: {
      static_prefix: ".",
      img_prefix: ".",
    },
    serverplugins: [],
    proxy: []
  };

  write(path + '/manifest.json', JSON.stringify(manifest, null, 2));
};

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files) {
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str) {
  fs.writeFile(path, str);
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err) {
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}